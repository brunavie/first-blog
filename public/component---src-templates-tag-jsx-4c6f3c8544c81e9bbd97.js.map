{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./src/components/Posts/Posts.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["Tag","render","this","props","data","tag","pathContext","pathname","location","title","description","url","style","fontSize","padding","Component","posts","allMarkdownRemark","edges","map","node","key","fields","slug","className","to","frontmatter","date","article","seo","config","siteTitle","siteDescription","image","siteImage","siteUrl","Fragment","name","content","property"],"mappings":"0OAMqBA,E,kGACnBC,OAAA,WAAU,IAAD,EACuBC,KAAKC,MAA3BC,EADD,EACCA,KACAC,EAFD,EACOC,YACND,IACAE,EAAaL,KAAKC,MAAMK,SAAxBD,SACR,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAKE,MAAK,QAAUJ,EAAOK,YAAW,sCAAwCL,EAAxC,wBAAoEM,IAAKJ,IAC/G,wBAAIK,MAAO,CAAEC,SAAU,OAAQC,QAAS,aAAxC,6BAAiFT,GACjF,kBAAC,IAAD,CAAOD,KAAMA,O,GAVUW,c,yGCFlB,G,UAAA,YAAe,IAEtBC,EAFqB,EAAXZ,KACOa,kBAAfC,MAEAC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACR,yBAAKC,IAAKD,EAAKE,OAAOC,KAAMC,UAAU,QACpC,kBAAC,OAAD,CAAMC,GAAIL,EAAKE,OAAOC,KAAMC,UAAU,cAAa,4BAAKJ,EAAKM,YAAYjB,QACzE,uBAAGe,UAAU,aAAaJ,EAAKM,YAAYC,MAC3C,2BAAIP,EAAKM,YAAYhB,iBAI3B,OACE,yBAAKc,UAAU,SACZR,M,kCCjBP,0DAIe,gBAA2C,IAAxCP,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,IAAKiB,EAAc,EAAdA,QACjCC,EAAM,CACRpB,MAAOA,EAAWA,EAAN,MAAiBqB,IAAOC,UAAcD,IAAOC,UACzDrB,YAAaA,GAAeoB,IAAOE,gBACnCC,MAAOH,IAAOI,UACdvB,IAAKA,EAAG,GAAMmB,IAAOK,QAAUxB,EAAQ,IAG3C,OACI,kBAAC,IAAMyB,SAAP,KACI,kBAAC,IAAD,CAAQ3B,MAAOoB,EAAIpB,OACf,0BAAM4B,KAAK,cAAcC,QAAST,EAAInB,cACtC,0BAAM2B,KAAK,QAAQC,QAAST,EAAII,QAC/BJ,EAAIlB,KAAO,0BAAM4B,SAAS,SAASD,QAAST,EAAIlB,MAChDiB,EACG,0BAAMW,SAAS,UAAUD,QAAQ,YAE7B,0BAAMC,SAAS,UAAUD,QAAQ,YAExCT,EAAIpB,OAAS,0BAAM8B,SAAS,WAAWD,QAAST,EAAIpB,QACpDoB,EAAInB,aACD,0BAAM6B,SAAS,iBAAiBD,QAAST,EAAInB,cAEhDmB,EAAII,OAAS,0BAAMM,SAAS,WAAWD,QAAST,EAAII,QACrD,0BAAMI,KAAK,eAAeC,QAAQ,wBACjCT,EAAIpB,OAAS,0BAAM4B,KAAK,gBAAgBC,QAAST,EAAIpB,QACrDoB,EAAInB,aACD,0BAAM2B,KAAK,sBAAsBC,QAAST,EAAInB,cAEjDmB,EAAII,OAAS,0BAAMI,KAAK,gBAAgBC,QAAST,EAAII","file":"component---src-templates-tag-jsx-4c6f3c8544c81e9bbd97.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/Layout\";\r\nimport Posts from '../components/Posts';\r\nimport SEO from '../components/SEO/SEO';\r\n\r\nexport default class Tag extends Component {\r\n  render() {\r\n    const { data, pathContext } = this.props;\r\n    const { tag } = pathContext;\r\n    const { pathname } = this.props.location;\r\n    return (\r\n      <Layout>\r\n        <div>\r\n          <SEO title={`Tag: ${tag}`} description={`Todos os posts marcados com a tag \"${tag}\" no CodeStack Brasil`} url={pathname} />\r\n          <h2 style={{ fontSize: '22px', padding: '0px 15px' }}>Todos os posts com a tag: {tag}</h2>\r\n          <Posts data={data} />\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [fields___prefix], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD/MM/YYYY\")\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport './Posts.css';\r\n\r\nexport default ({ data }) => {\r\n  const { edges } = data.allMarkdownRemark;\r\n  const posts = (\r\n    edges.map(({ node }) => (\r\n      <div key={node.fields.slug} className=\"post\">\r\n        <Link to={node.fields.slug} className=\"post-title\"><h2>{node.frontmatter.title}</h2></Link>\r\n        <p className=\"post-date\">{node.frontmatter.date}</p>\r\n        <p>{node.frontmatter.description}</p>\r\n      </div>\r\n    ))\r\n  );\r\n  return (\r\n    <div className=\"posts\">\r\n      {posts}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport config from \"../../../data/config\";\r\n\r\nexport default ({ title, description, url, article }) => {\r\n    const seo = {\r\n        title: title ? `${title} | ${config.siteTitle}` : config.siteTitle,\r\n        description: description || config.siteDescription,\r\n        image: config.siteImage,\r\n        url: url ? `${config.siteUrl}${url}` : '',\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title={seo.title} >\r\n                <meta name=\"description\" content={seo.description} />\r\n                <meta name=\"image\" content={seo.image} />\r\n                {seo.url && <meta property=\"og:url\" content={seo.url} />}\r\n                {article ? (\r\n                    <meta property=\"og:type\" content=\"article\" />\r\n                ) : (\r\n                        <meta property=\"og:type\" content=\"website\" />\r\n                    )}\r\n                {seo.title && <meta property=\"og:title\" content={seo.title} />}\r\n                {seo.description && (\r\n                    <meta property=\"og:description\" content={seo.description} />\r\n                )}\r\n                {seo.image && <meta property=\"og:image\" content={seo.image} />}\r\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n                {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\r\n                {seo.description && (\r\n                    <meta name=\"twitter:description\" content={seo.description} />\r\n                )}\r\n                {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\r\n            </Helmet>\r\n        </React.Fragment>\r\n    )\r\n}\r\n"],"sourceRoot":""}